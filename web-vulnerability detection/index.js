const express = require("express");
const app = express();
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
let ejs = require('ejs');
const nmap = require('node-nmap');
const expressLayouts = require('express-ejs-layouts');
const passport = require('passport');
const flash = require('connect-flash');
const session = require('express-session');
const sslChecker = require("ssl-checker");
const detector = require('web-technology-detector');
const checkMyHeaders = require('check-my-headers');
const PDFDocument = require('pdfkit');
const fs = require('fs');
var moment = require('moment'); // require

moment().format();



var today = moment().format('MMMM Do YYYY, h:mm:ss a');

global.downloadName = "";




require('./config/passport')(passport);




// DB Config

// EJS
app.use(expressLayouts);

app.use(express.static("public"));
app.set('view engine', 'ejs');
app.use(express.urlencoded({
  extended: true
}));


app.use(
  session({
    secret: 'secret',
    resave: true,
    saveUninitialized: true
  })
);

// Passport middleware
app.use(passport.initialize());
app.use(passport.session());

// Connect flash
app.use(flash());

// Global variables
app.use(function (req, res, next) {
  res.locals.success_msg = req.flash('success_msg');
  res.locals.error_msg = req.flash('error_msg');
  res.locals.error = req.flash('error');
  next();
});

app.use('/', require('./routes/index.js'));
app.use('/users', require('./routes/users'));

app.get("/dashboard", (req, res) => {
  res.render("dashboard", {
    info: "0",
    web: "",
    ssl: "",
    quickscan: "",
    fullscan: false,
    missing_headers: "",
    tech: "",
    head: ""
  })
});

app.post("/quickScan", (req, res) => {

  var missing = "";

  var ssl_result = "";
  var getSslDetails = async function (hostname) {
    ssl_result = await sslChecker(hostname, {
      method: "GET",
      port: 443
    });
    console.log(ssl_result);
  }
  getSslDetails(req.body.website);
  console.log("quick scan");

  var s = "https://";
  checkMyHeaders(s + req.body.website)
    .then(({
      messages,
      headers,
      status
    }) => {
      missing = messages;
      console.log(`Status code: ${status}`)
      console.log(`Messages:`)
      console.log(messages)
      console.log(missing)
      console.log("Current headers:")
      console.log(headers)
    });



  console.log(req.body.website);
  nmap.nmapLocation = 'nmap'; //default
  let quickscan = new nmap.QuickScan(req.body.website);
  quickscan.startScan();
  quickscan.on('complete', function (data) {
    console.log(data);
    res.render("dashboard", {
      info: "1",
      web: req.body.website,
      ssl: ssl_result,
      quickscan: data,
      fullscan: false,
      missing_headers: missing,
      tech: "",
      head: ""
    });

    var check;
    if (ssl_result != "") {

      if (ssl_result.valid == true) {
        check = "Present"
      } else {
        check = "Not Present"
      }
    } else {
      check = "cannot access"
    }



    const doc = new PDFDocument();
    doc.pipe(fs.createWriteStream(__dirname + "/" + req.body.website + '.pdf'));
    doc
      .fillColor('#243d81')
      .fontSize(16)
      .text('VulnX', 20, 12)
      .fillColor('black')
      .fontSize(12)
      .text(today, 20, 27)
    doc
      .fontSize(20)
      .text('SCAN RESULT - QUICK SCAN', 120, 50)

    doc
      .fillColor('#243d81')
      .fontSize(19)
      .text('-URL: ' + req.body.website, 140, 80)
      .fillColor('#243d81')
      .fontSize(17)
      .text('-IP Address: ' + data[0].ip, 140, 130)

    doc
      .fillColor('#243d81')
      .fontSize(17)
      .text('-SSL:', 140, 180)
      .fillColor('black')
      .fontSize(15)
      .text('SSL CERTIFICATE:' + check, 160, 220)
      .fontSize(15)
      .text('DAYS REMAINING:' + ssl_result.daysRemaining, 160, 260)

    if (missing != "") {
      doc
        .fillColor('#243d81')
        .fontSize(17)
        .text('-MISSING HEADERS:', 140, 310)
      var x = 160;
      var y = 340
      var m = missing;

      m.forEach(myFunction);

      function myFunction(item, index) {

        if (index < 10) {
          var s = (item.msg).split(":");
          doc
            .fillColor('black')
            .fontSize(15)
            .text(s[0] + ":  " + s[1], x, y)

          y = y + 30;
        }
      }
    }



    doc.save();

    doc.end();




    downloadName = req.body.website + ".pdf";









  });

  quickscan.on('error', function (error) {

    res.render("dashboard", {
      info: "2",
      web: "",
      ssl: "",
      quickscan: ""
    });
  });




});





app.post("/fullScan", (req, res) => {

  var s = "https://";
  var missing = "";
  var current_headers = "";
  var technologies = "";
  var ssl_result = "";


  var getSslDetails = async function (hostname) {
    ssl_result = await sslChecker(hostname, {
      method: "GET",
      port: 443
    });
    technologies = await new detector().url(s + req.body.website);

  }
  getSslDetails(req.body.website);


  checkMyHeaders(s + req.body.website)
    .then(({
      messages,
      headers,
      status
    }) => {
      missing = messages;
      current_headers = headers;
      console.log(`Status code: ${status}`)


    });




  console.log("fullscan");
  nmap.nmapLocation = 'nmap'; //default
  var osandports = new nmap.OsAndPortScan(req.body.website);


  osandports.on('complete', function (data) {
    console.log(data[0]);

    res.render("dashboard", {
      info: "3",
      web: req.body.website,
      ssl: ssl_result,
      quickscan: "",
      fullscan: data,
      missing_headers: missing,
      tech: technologies,
      head: current_headers
    });

    var check;
    if (ssl_result != "") {

      if (ssl_result.valid == true) {
        check = "Present"
      } else {
        check = "Not Present"
      }
    } else {
      check = "cannot access"
    }

    const doc = new PDFDocument();
    doc.pipe(fs.createWriteStream(__dirname + "/" + req.body.website + '.pdf'));
    doc
      .fillColor('#243d81')
      .fontSize(16)
      .text('VulnX', 20, 12)
      .fillColor('black')
      .fontSize(12)
      .text(today, 20, 27)
    doc
      .fontSize(20)
      .text('SCAN RESULT - FULL SCAN', 120, 50)

    doc
      .fillColor('#243d81')
      .fontSize(19)
      .text('-URL: ' + req.body.website, 140, 80)
      .fillColor('#243d81')
      .fontSize(17)
      .text('-IP Address: ' + data[0].ip, 140, 130)
      .fontSize(17)
      .text('-OS: ' + data[0].osNmap, 140, 180)

    doc
      .fillColor('#243d81')
      .fontSize(17)
      .text('-SSL:', 140, 220)
      .fillColor('black')
      .fontSize(15)
      .text('SSL CERTIFICATE:' + check, 160, 260)
      .fillColor('black')
      .fontSize(15)
      .text('DAYS REMAINING:' + ssl_result.daysRemaining, 160, 310)

    if (missing != "") {
      doc
        .fillColor('#243d81')
        .fontSize(17)
        .text('-MISSING HEADERS:', 140, 340)
      var x = 160;
      var y = 390
      var m = missing

      m.forEach(myFunction);

      function myFunction(item, index) {

        if (index < 10) {
          var s = (item.msg).split(":");
          doc
            .fillColor('black')
            .fontSize(15)
            .text(s[0] + ":  " + s[1], x, y)

          y = y + 30;
        }
      }
    }

    doc
      .addPage()
    doc
      .fillColor('#243d81')
      .fontSize(17)
      .text('-OPEN PORTS:', 140, 50)
    var x = 160;
    var y = 90;
    var op = data[0].openPorts

    op.forEach(myFunction2);

    function myFunction2(item, index) {

      if (index < 10) {

        doc
          .fillColor('black')
          .fontSize(15)
          .text(item.port + ":  " + item.service, x, y)

        y = y + 30;
      }
    }
    if (technologies != "") {
      doc
        .addPage()

      doc
        .fillColor('#243d81')
        .fontSize(17)
        .text('-TECHNOLOGIES DETECTED ', 140, 50)
      var x = 160;
      var y = 90
      var t = technologies

      t.forEach(myFunction1);

      function myFunction1(item, index) {

        if (index < 10) {

          doc
            .fillColor('black')
            .fontSize(15)
            .text(item.name + ":  " + item.version, x, y)

          y = y + 30;
        }
      }
    }

    if(current_headers != ""){
      doc
      .fillColor('#243d81')
      .fontSize(17)
      .text('-HEADERS PRESENT', 140, 360)
      .fillColor('black')
      .fontSize(15)
      .text("Connection Type :" + current_headers.connection, 160, 400)
      .text("Server :" + current_headers.server, 160, 450)

    }



    







    doc.save();

    doc.end();




    downloadName = req.body.website + ".pdf";












  });
  osandports.on('error', function (error) {
    console.log(error);
  });



});

app.post("/download", (req, res) => {

  console.log("heyy wassup");
  res.set('Content-Type', 'application/octet-stream');
  res.set('Content-Disposition', `attachment; filename=${downloadName}`);

  res.download(downloadName, downloadName, () => {

  });
});




const db = 'mongodb+srv://varadkj:varad@cluster0.qsnmn.mongodb.net/test?retryWrites=true&w=majority';

// Connect to MongoDB
mongoose
  .connect(
    db, {
      useUnifiedTopology: true,
      useNewUrlParser: true
    }
  )
  .then(() => console.log('MongoDB Connected'))
  .catch(err => console.log(err));



app.listen(3000, () => {
  console.log("server started");
});